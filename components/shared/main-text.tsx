"use client";

import { Button } from "@/components/ui/button";
import confetti from "canvas-confetti";
import { cn } from "@/lib/utils";
import { useEffect, useState } from "react";
import {motion} from "framer-motion";
import { hapticFeedback, openTelegramLink } from "@telegram-apps/sdk";
import { ProfileForm } from "./profile";

const buttonVariants = {
  hidden: { 
    opacity: 0, 
    y: 20 // –°–¥–≤–∏–≥ –≤–Ω–∏–∑
  },
  visible: { 
    opacity: 1, 
    y: 0, 
    transition: { 
      duration: 0.7, // –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞–Ω–∏–º–∞—Ü–∏–∏
      ease: "easeInOut" 
    }
  },
  exit: { 
    opacity: 0, 
    y: 20, 
    transition: { 
      duration: 0.3 
    }
  }
};

const confettiHapticFeedback = () => {
  const hapticSequence = [
    () => hapticFeedback.impactOccurred("medium"),
    () => hapticFeedback.impactOccurred("heavy"),
    () => hapticFeedback.impactOccurred("rigid"),
    () => hapticFeedback.impactOccurred("medium"),
    () => hapticFeedback.impactOccurred("heavy"),
  ];

  // –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤–∏–±—Ä–∞—Ü–∏–π —Å –ø–∞—É–∑–∞–º–∏
  hapticSequence.forEach((haptic, index) => {
    setTimeout(haptic, index * 100); // 100 –º—Å –º–µ–∂–¥—É –≤–∏–±—Ä–∞—Ü–∏—è–º–∏
  });
};

const launchConfettiWithHaptics = () => {
  launchConfetti(); // –ó–∞–ø—É—Å–∫ –∞–Ω–∏–º–∞—Ü–∏–∏ –∫–æ–Ω—Ñ–µ—Ç—Ç–∏
  try {
    confettiHapticFeedback(); // –ó–∞–ø—É—Å–∫ –º–µ–ª–æ–¥–∏–∏ –≤–∏–±—Ä–∞—Ü–∏–π
  } catch (error) {
    console.log("Haptic Feedback –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è:", error);
  }
};

const launchConfetti = () => {
  confetti({
    particleCount: 200, // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å—Ç–∏—Ü
    spread: 100, // –£–≥–æ–ª —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è
    origin: { x: 0.5, y: 0.5 }, // –¶–µ–Ω—Ç—Ä —ç–∫—Ä–∞–Ω–∞
    colors: ["#ff0", "#0ff", "#f00", "#0f0", "#00f"], // –¶–≤–µ—Ç–∞
  });
};

const TypingEffectWithCursor = ({
  texts,
  speed = 100,
}: {
  texts: string[];
  speed: number;
}) => {
  const [isFinished, setIsFinished] = useState(false); // –§–ª–∞–≥ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏
  const [currentTextIndex, setCurrentTextIndex] = useState(0); // –ò–Ω–¥–µ–∫—Å —Ç–µ–∫—É—â–µ–≥–æ —Ç–µ–∫—Å—Ç–∞
  const [displayedText, setDisplayedText] = useState("");
  const [index, setIndex] = useState(0);
  const [showCursor, setShowCursor] = useState(true);
  const [showConfettiButton, setShowConfettiButton] = useState(false); // –ö–Ω–æ–ø–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∫–æ–Ω—Ñ–µ—Ç—Ç–∏

  const [pressedHapButton, setPressedHapButton] = useState(false);
  const [pressedHapButton2, setPressedHapButton2] = useState(false);

  // –õ–æ–≥–∏–∫–∞ –∞–Ω–∏–º–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞
  useEffect(() => {
    if (isFinished) return;

    if (index < texts[currentTextIndex].length) {
      const timeout = setTimeout(() => {
        setDisplayedText((prev) => prev + texts[currentTextIndex][index]);
        setIndex((prev) => prev + 1);
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ haptic feedback
        try {
          hapticFeedback.impactOccurred("soft");
        } catch (error) {
          console.log("Haptic feedback –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞:", error);
        }
      }, speed);
      return () => clearTimeout(timeout);
    } else if (currentTextIndex < texts.length - 1) {
      // –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Ç–µ–∫—Å—Ç—É
      const switchTimeout = setTimeout(() => {
        setDisplayedText("");
        setIndex(0);
        setCurrentTextIndex((prev) => prev + 1);
      }, 1000); // –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Ç–µ–∫—Å—Ç–∞–º–∏
      return () => clearTimeout(switchTimeout);
    } else {
      // –ü–æ—Å–ª–µ–¥–Ω–∏–π —Ç–µ–∫—Å—Ç –∑–∞–≤–µ—Ä—à—ë–Ω, –ø–æ–∫–∞–∑–∞—Ç—å –∫–Ω–æ–ø–∫—É
      setIsFinished(true);
      setShowConfettiButton(true);
    }
  }, [index, texts, speed, currentTextIndex, isFinished]);

  // –ê–Ω–∏–º–∞—Ü–∏—è –º–∏–≥–∞–Ω–∏—è –∫—É—Ä—Å–æ—Ä–∞
  useEffect(() => {
    const cursorInterval = setInterval(() => {
      setShowCursor((prev) => !prev);
    }, 500); // –ú–∏–≥–∞–µ—Ç –∫–∞–∂–¥—ã–µ 500 –º—Å
    return () => clearInterval(cursorInterval);
  }, []);

  return (
    <div className="flex flex-col justify-center items-center h-screen w-screen bg-gray-100 ">
      {
        !pressedHapButton2 ? (
          <>
            <span>
              {displayedText}
              <span
                className={cn(
                  "w-1 h-6 bg-black transition-opacity duration-500 ml-1",
                  showCursor ? "opacity-100" : "opacity-0"
                )}
              >
                .
              </span>
            </span>
            {showConfettiButton && (
            <div>
                <motion.div
                    variants={buttonVariants} 
                    initial="hidden" 
                    animate="visible" 
                    exit="exit"
                >
                    {
                        pressedHapButton ? (
                            <div className="mt-4">
                                <Button variant={"outline"} className="text-lg p-5 font-bold" onClick={() => {
                                    launchConfettiWithHaptics();
                                    setPressedHapButton2(true);
                                    setShowConfettiButton(false);
                                }}>–ü–æ–∑–¥—Ä–∞–≤–∏–ª üòâ</Button>
                            </div>
                        ) : (
                            <>
                                <div className="mt-4">
                                    <Button variant={"outline"} className="text-lg p-5 font-bold" onClick={() => {
                                        setPressedHapButton(true);
                                        handleOpenLink();
                                    }}>–ü–æ–∑–¥—Ä–∞–≤–∏—Ç—å üéâ</Button>
                                </div>
                                <div className="mt-4">
                                    <Button variant={"outline"} className="text-lg p-5 font-bold" onClick={() => {
                                      launchConfettiWithHaptics();
                                      setPressedHapButton2(true);
                                      setShowConfettiButton(false);
                                    }}>–£–∂–µ –ø–æ–∑–¥—Ä–∞–≤–∏–ª ü•≥</Button>
                                </div>
                            </>
                        )
                    }
                </motion.div>
                
            </div>
            
          )}
          </>
          
        ) : <ProfileForm />
      }
    </div>
  );
};

const handleOpenLink = () => {
    openTelegramLink("https://t.me/nUle115FZ");
};

export default function MainText() {
  // –õ–æ–≥–∏–∫–∞ –¥–ª—è Telegram WebApp

  return (
    <div className="flex justify-center items-center h-screen w-screen bg-gray-100">
      
        <h1 className="text-2xl font-semibold text-center">
          <TypingEffectWithCursor
            texts={["–ù–µ—É–∂–µ–ª–∏...", "–ú–∏—à–µ 18?", "–ë—ã—Å—Ç—Ä–µ–µ –ø–æ–∑–¥—Ä–∞–≤–ª—è–π—Ç–µ –µ–≥–æ!"]}
            speed={50}
          />
        </h1>
      
    </div>
  );
}
