"use client";

// –ò–º–ø–æ—Ä—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –∏ –±–∏–±–ª–∏–æ—Ç–µ–∫
import { Button } from "@/components/ui/button";
import confetti from "canvas-confetti";
import { cn } from "@/lib/utils";
import { useEffect, useState } from "react";
import { motion } from "framer-motion";
import { hapticFeedback, openTelegramLink } from "@telegram-apps/sdk";
import { ProfileForm } from "./profile";

// –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∞–Ω–∏–º–∞—Ü–∏–π –¥–ª—è –∫–Ω–æ–ø–æ–∫
const buttonVariants = {
  hidden: { 
    opacity: 0, // –°–∫—Ä—ã—Ç–∏–µ –∫–Ω–æ–ø–∫–∏
    y: 20 // –°–¥–≤–∏–≥ –∫–Ω–æ–ø–∫–∏ –≤–Ω–∏–∑
  },
  visible: { 
    opacity: 1, // –ü–æ–∫–∞–∑ –∫–Ω–æ–ø–∫–∏
    y: 0, // –ë–µ–∑ —Å–¥–≤–∏–≥–∞
    transition: { 
      duration: 0.7, // –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞–Ω–∏–º–∞—Ü–∏–∏
      ease: "easeInOut" // –¢–∏–ø –∞–Ω–∏–º–∞—Ü–∏–∏
    }
  },
  exit: { 
    opacity: 0, // –°–∫—Ä—ã—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ
    y: 20, // –°–¥–≤–∏–≥ –∫–Ω–æ–ø–∫–∏ –≤–Ω–∏–∑
    transition: { 
      duration: 0.3 // –ë—ã—Å—Ç—Ä–æ–µ –∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏–µ
    }
  }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö –≤–∏–±—Ä–∞—Ü–∏–π
const confettiHapticFeedback = () => {
  const hapticSequence = [
    () => hapticFeedback.impactOccurred("medium"),
    () => hapticFeedback.impactOccurred("heavy"),
    () => hapticFeedback.impactOccurred("rigid"),
    () => hapticFeedback.impactOccurred("medium"),
    () => hapticFeedback.impactOccurred("heavy"),
  ];

  // –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤–∏–±—Ä–∞—Ü–∏–π —Å –ø–∞—É–∑–∞–º–∏
  hapticSequence.forEach((haptic, index) => {
    setTimeout(haptic, index * 100); // 100 –º—Å –º–µ–∂–¥—É –≤–∏–±—Ä–∞—Ü–∏—è–º–∏
  });
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∫–æ–Ω—Ñ–µ—Ç—Ç–∏ –∏ –≤–∏–±—Ä–∞—Ü–∏–∏
const launchConfettiWithHaptics = () => {
  launchConfetti(); // –ó–∞–ø—É—Å–∫ –∞–Ω–∏–º–∞—Ü–∏–∏ –∫–æ–Ω—Ñ–µ—Ç—Ç–∏
  try {
    confettiHapticFeedback(); // –ó–∞–ø—É—Å–∫ –≤–∏–±—Ä–∞—Ü–∏–π
  } catch (error) {
    console.log("Haptic Feedback –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è:", error); // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏
  }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–æ–Ω—Ñ–µ—Ç—Ç–∏
const launchConfetti = () => {
  confetti({
    particleCount: 200, // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å—Ç–∏—Ü
    spread: 100, // –£–≥–æ–ª —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è
    origin: { x: 0.5, y: 0.5 }, // –¶–µ–Ω—Ç—Ä —ç–∫—Ä–∞–Ω–∞
    colors: ["#ff0", "#0ff", "#f00", "#0f0", "#00f"], // –¶–≤–µ—Ç–∞ —á–∞—Å—Ç–∏—Ü
  });
};

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞ —Å –º–∏–≥–∞—é—â–∏–º –∫—É—Ä—Å–æ—Ä–æ–º
const TypingEffectWithCursor = ({
  texts,
  speed = 100, // –°–∫–æ—Ä–æ—Å—Ç—å –∞–Ω–∏–º–∞—Ü–∏–∏
}: {
  texts: string[]; // –ú–∞—Å—Å–∏–≤ —Ç–µ–∫—Å—Ç–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
  speed: number; // –°–∫–æ—Ä–æ—Å—Ç—å –Ω–∞–±–æ—Ä–∞ —Ç–µ–∫—Å—Ç–∞
}) => {
  const [isFinished, setIsFinished] = useState(false); // –§–ª–∞–≥ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏
  const [currentTextIndex, setCurrentTextIndex] = useState(0); // –ò–Ω–¥–µ–∫—Å —Ç–µ–∫—É—â–µ–≥–æ —Ç–µ–∫—Å—Ç–∞
  const [displayedText, setDisplayedText] = useState(""); // –¢–µ–∫—É—â–∏–π –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã–π —Ç–µ–∫—Å—Ç
  const [index, setIndex] = useState(0); // –ò–Ω–¥–µ–∫—Å —Ç–µ–∫—É—â–µ–≥–æ —Å–∏–º–≤–æ–ª–∞ –≤ —Ç–µ–∫—Å—Ç–µ
  const [showCursor, setShowCursor] = useState(true); // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫—É—Ä—Å–æ—Ä–∞
  const [showConfettiButton, setShowConfettiButton] = useState(false); // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–Ω–æ–ø–∫–∏ –∫–æ–Ω—Ñ–µ—Ç—Ç–∏
  const [pressedHapButton, setPressedHapButton] = useState(false); // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏
  const [pressedHapButton2, setPressedHapButton2] = useState(false); // –í—Ç–æ—Ä–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∫–Ω–æ–ø–∫–∏

  // –õ–æ–≥–∏–∫–∞ –∞–Ω–∏–º–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞
  useEffect(() => {
    if (isFinished) return; // –ï—Å–ª–∏ –∞–Ω–∏–º–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –≤—ã—Ö–æ–¥–∏–º

    if (index < texts[currentTextIndex].length) {
      const timeout = setTimeout(() => {
        setDisplayedText((prev) => prev + texts[currentTextIndex][index]); // –î–æ–±–∞–≤–ª—è–µ–º —Å–∏–º–≤–æ–ª
        setIndex((prev) => prev + 1); // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∏–Ω–¥–µ–∫—Å —Å–∏–º–≤–æ–ª–∞
        try {
          hapticFeedback.impactOccurred("soft"); // –í–∏–±—Ä–∞—Ü–∏—è –ø—Ä–∏ –∫–∞–∂–¥–æ–º —Å–∏–º–≤–æ–ª–µ
        } catch (error) {
          console.log("Haptic feedback –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞:", error); // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏
        }
      }, speed);
      return () => clearTimeout(timeout); // –û—á–∏—Å—Ç–∫–∞ —Ç–∞–π–º–µ—Ä–∞
    } else if (currentTextIndex < texts.length - 1) {
      // –ï—Å–ª–∏ –µ—Å—Ç—å —Å–ª–µ–¥—É—é—â–∏–π —Ç–µ–∫—Å—Ç, –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –Ω–µ–≥–æ
      const switchTimeout = setTimeout(() => {
        setDisplayedText(""); // –û—á–∏—Å—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞
        setIndex(0); // –°–±—Ä–æ—Å –∏–Ω–¥–µ–∫—Å–∞
        setCurrentTextIndex((prev) => prev + 1); // –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Ç–µ–∫—Å—Ç—É
      }, 1000); // –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Ç–µ–∫—Å—Ç–∞–º–∏
      return () => clearTimeout(switchTimeout);
    } else {
      // –ü–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ç–µ–∫—Å—Ç–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É
      setIsFinished(true);
      setShowConfettiButton(true);
    }
  }, [index, texts, speed, currentTextIndex, isFinished]);

  // –ê–Ω–∏–º–∞—Ü–∏—è –º–∏–≥–∞—é—â–µ–≥–æ –∫—É—Ä—Å–æ—Ä–∞
  useEffect(() => {
    const cursorInterval = setInterval(() => {
      setShowCursor((prev) => !prev); // –ú–µ–Ω—è–µ–º –≤–∏–¥–∏–º–æ—Å—Ç—å –∫—É—Ä—Å–æ—Ä–∞
    }, 500); // –ú–∏–≥–∞–µ—Ç –∫–∞–∂–¥—ã–µ 500 –º—Å
    return () => clearInterval(cursorInterval); // –û—á–∏—Å—Ç–∫–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
  }, []);

  // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π —Ç–µ–∫—Å—Ç–∞
  return (
    <div className="flex flex-col justify-center items-center h-screen w-screen bg-gray-100">
      {
        !pressedHapButton2 ? (
          <>
            <span>
              {displayedText}
              <span
                className={cn(
                  "w-1 h-6 bg-black transition-opacity duration-500 ml-1",
                  showCursor ? "opacity-100" : "opacity-0" // –ú–∏–≥–∞–Ω–∏–µ –∫—É—Ä—Å–æ—Ä–∞
                )}
              >
                .
              </span>
            </span>
            {showConfettiButton && (
              <div>
                <motion.div
                  variants={buttonVariants} 
                  initial="hidden" 
                  animate="visible" 
                  exit="exit"
                >
                  {
                    pressedHapButton ? (
                      <div className="mt-4">
                        <Button variant={"outline"} className="text-lg p-5 font-bold" onClick={() => {
                          launchConfettiWithHaptics(); // –ó–∞–ø—É—Å–∫ –∫–æ–Ω—Ñ–µ—Ç—Ç–∏ –∏ –≤–∏–±—Ä–∞—Ü–∏–π
                          setPressedHapButton2(true); // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
                          setShowConfettiButton(false); // –°–∫—Ä—ã—Ç—å –∫–Ω–æ–ø–∫—É
                        }}>–ü–æ–∑–¥—Ä–∞–≤–∏–ª üòâ</Button>
                      </div>
                    ) : (
                      <>
                        <div className="mt-4">
                          <Button variant={"outline"} className="text-lg p-5 font-bold" onClick={() => {
                            setPressedHapButton(true); // –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–Ω–æ–ø–∫–∏
                            handleOpenLink(); // –û—Ç–∫—Ä—ã—Ç–∏–µ Telegram-—Å—Å—ã–ª–∫–∏
                          }}>–ü–æ–∑–¥—Ä–∞–≤–∏—Ç—å üéâ</Button>
                        </div>
                        <div className="mt-4">
                          <Button variant={"outline"} className="text-lg p-5 font-bold" onClick={() => {
                            launchConfettiWithHaptics(); // –ó–∞–ø—É—Å–∫ –∫–æ–Ω—Ñ–µ—Ç—Ç–∏ –∏ –≤–∏–±—Ä–∞—Ü–∏–π
                            setPressedHapButton2(true); // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
                            setShowConfettiButton(false); // –°–∫—Ä—ã—Ç—å –∫–Ω–æ–ø–∫—É
                          }}>–£–∂–µ –ø–æ–∑–¥—Ä–∞–≤–∏–ª ü•≥</Button>
                        </div>
                      </>
                    )
                  }
                </motion.div>
              </div>
            )}
          </>
        ) : <ProfileForm /> // –ï—Å–ª–∏ —É–∂–µ –Ω–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É
      }
    </div>
  );
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è —Å—Å—ã–ª–∫–∏ –≤ Telegram
const handleOpenLink = () => {
  openTelegramLink("https://t.me/nUle115FZ");
};

// –ì–ª–∞–≤–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
export default function MainText() {
  return (
    <div className="flex justify-center items-center h-screen w-screen bg-gray-100">
      <h1 className="text-2xl font-semibold text-center">
        <TypingEffectWithCursor
          texts={["–ù–µ—É–∂–µ–ª–∏...", "–ú–∏—à–µ 18?", "–ë—ã—Å—Ç—Ä–µ–µ –ø–æ–∑–¥—Ä–∞–≤–ª—è–π—Ç–µ –µ–≥–æ!"]}
          speed={50} // –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —Å–∫–æ—Ä–æ—Å—Ç—å –Ω–∞–±–æ—Ä–∞ —Ç–µ–∫—Å—Ç–∞
        />
      </h1>
    </div>
  );
}
