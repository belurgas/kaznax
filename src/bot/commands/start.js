import { getUser, getUserWithRole }  from '../../db/checkUserOnStart.js';
import { MongoClient } from "mongodb";
import { config } from "../../config.js";

export const startCommand = async (ctx) => {

    let user = await getUser(ctx.from.id);
    console.log(user);
    if (user?.role === "USER") {
        // –í—ã–≤–æ–¥ –º–µ–Ω—é –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        ctx.reply("–ü—Ä–∏–≤–µ—Ç...")
    } else if (user?.role === "ADMIN") {
        // –í—ã–≤–æ–¥ –º–µ–Ω—é –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
        ctx.reply("–ü—Ä–∏–≤–µ—Ç –∞–¥–º–∏–Ω...")
    } else if (user?.role === "EHOST") {
        // –í—ã–≤–æ–¥ –º–µ–Ω—é –¥–ª—è –≤–µ–¥—É—â–µ–≥–æ
        ctx.reply("–ü—Ä–∏–≤–µ—Ç –≤–µ–¥—É—â–∏–π...")
    } else {
        const text = ctx.message.text;
        const param = text.split(' ')[1];

        if (param) {
            console.log(param);
            if (param === "felixeventhost") {
                let user = await getUserWithRole("EHOST");
                if (!user) {
                    const client = new MongoClient(config.MONGO_CLIENT);
                    await client.connect();
                    const db = client.db("kaznax");
                    const users = db.collection("users");

                    let full_name = ""
                    if (ctx.from.first_name) {
                        full_name += ctx.from.first_name
                    }
                    if (ctx.from.last_name) {
                        full_name += ` ${ctx.from.last_name}`
                    }

                    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    const newUser = {
                        telegram_id: ctx.from.id,
                        username: ctx.from.username || null,
                        photo_url: null,
                        full_name: full_name || null,
                        role: "EHOST",
                        registered: false,
                        created: new Date(),
                    };
                    await users.insertOne(newUser);
                    ctx.reply("–ü—Ä–∏–≤–µ—Ç –≤–µ–¥—É—â–∏–π...")
                } else {
                    ctx.reply("–¢—ã –Ω–µ –≤–µ–¥—É—â–∏–π!")
                }
            }
        } else {
            console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ –±–¥');
            ctx.reply(
                '*–ü—Ä–∏–≤–µ—Ç üôã‚Äç‚ôÇÔ∏è*\n–≠—Ç–æ –ø–∏–ª–æ—Ç–Ω—ã–π –ø—Ä–æ–µ–∫—Ç –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π, –±—É–¥–µ—Ç–µ –Ω–∞—à–∏–º–∏ –ø–æ–¥–æ–ø—ã—Ç–Ω—ã–º–∏ ü§ù\n–î–∏–∑–∞–π–Ω –ø—Ä–æ—Å—Ç–æ–π, –Ω–µ–º–Ω–æ–≥–æ —Å —é–º–æ—Ä–æ–º, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è üòÅ\n\n_–ò–∑\\-–∑–∞ —Ç–æ–≥–æ, —á—Ç–æ –º—ã —Ä–µ—à–∏–ª–∏ –Ω–∏–∫–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º –Ω–µ —Å–∂–∏–º–∞—Ç—å —Ñ–∞–π–ª—ã, —Ç–æ –æ–Ω–∏ –º–æ–≥—É –ø–æ–¥–≥—Ä—É–∂–∞—Ç—å—Å—è –Ω–µ–º–Ω–æ–≥–æ –±–æ–ª—å—à–µ –æ–±—ã—á–Ω–æ–≥–æ_',
                {
                    parse_mode: 'MarkdownV2',
                    reply_markup: {
                        inline_keyboard: [
                            [{
                                text: '–û—Ç–∫—Ä—ã–≤–∞–π',
                                web_app: { url: process.env.WEB_APP_URL || '' }
                            }],
                        ],
                    },
                },   
            );
        }
    }
    
}